Одна из возможностей упростить класс FraudDetector кроется
в снятии с него ответственности за реализацию каждого правила
обнаружения мошенничества.

На данный момент класс FraudDetector содержит две функциональности:
- реализацию самих правил определения мошенничества (методы isFraudByRule1(), isFraudByRule2() и так далее)
- применение этих правил для валидации транзакции (isFraudByRule1(transaction) || isFraudByRule2(transaction) ...)

Это две совершенно разные функциональности (следуя SRP принципу)!

А раз так, значит их можно разделить! И реализовать отдельно друг от друга.

Каждое правило - это по сути отдельная программа,
которая существует и может быть выполнена в независимости от всех остальных правил.

Следуя Single Responsibility Principle предлагаем код
каждого правила реализовать в собственном классе!

Тогда у классов правил будет только одна ответственность
(реализация одного правила) и одна причина для того, чтобы
менять код в таких классах (код в классах правил будет меняться
только тогда, когда будут меняться сами правила).

Попробуйте вынести в отдельный класс первое правило.

Так как правило будет находиться в отдельном классе напишите на этот класс тесты.

Попробуйте воспользоваться созданным классом реализующим правило
для упрощения кода в классе FraudDetector.

#### Поддержка, вопросы и обратная связь по проекту
* [Телеграмм группа проекта](https://t.me/+mvRhG9YECTlkZjQ0)
* [Телеграмм автора курса] (@javagurulv)
* [Емейл автора курса] (itguruby@mail.ru)
