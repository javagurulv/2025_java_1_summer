Давайте на практике покажем преимущества принципа SRP в действии.

Предположим от бизнеса поступило требование внести изменения в первое правило:

- Rule 1: трейдер по имени "Pokemon" и "DJ" являются мошенниками,
все их транзакции должны быть отклонены.

Где в коде мы будем делать изменения?

Конечно же в классе FraudRule1!

Запомните: любое изменение кода, даже самое простое несет риск внесения ошибки в код программы.

Поэтому, чем меньше кода мы затрагиваем изменениями тем лучше.

Так как сейчас первое правило отделено от всех остальных и находится в отдельном классе,
риск связанный с внесением изменений уменьшается. Все что мы можем поломать своими изменениями
это работу только правила FraudRule1. Код других правил нашими изменениями не будет затронут.

Это уменьшает риск внесения в код ошибки при изменении функциональности приложения.

Помните, что это учебный проект, и наши правила очень простые! В реальных проектах
бизнес код намного сложнее, поэтому пренебрежение правилом SRP может повлечь очень
серьезные последствия, когда ошибка будет обнаружена только на прод среде и она
окажет негативное влияние на пользователей.

Внесите требуемые бизнесом изменения в первое правило.
Не забудьте протестировать ваши изменения, добавьте автоматические тесты.

#### Поддержка, вопросы и обратная связь по проекту
* [Телеграмм группа проекта](https://t.me/+mvRhG9YECTlkZjQ0)
* [Телеграмм автора курса] (@javagurulv)
* [Емейл автора курса] (itguruby@mail.ru)
